/*
 * Workforce API
 *
 * Public API for the Workforce software
 *
 * The version of the OpenAPI document: v1
 * Contact: adamlonsdale@me.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Workforce.Client.OpenAPIDateConverter;

namespace Workforce.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract(Name = "Employee")]
    public partial class Employee : IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Employee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="gender">gender.</param>
        /// <param name="nationalityId">nationalityId.</param>
        /// <param name="employmentTypeId">employmentTypeId.</param>
        /// <param name="nationalInsuranceNumber">nationalInsuranceNumber.</param>
        /// <param name="noticePeriodId">noticePeriodId.</param>
        /// <param name="recruitmentDetails">recruitmentDetails.</param>
        /// <param name="recruitmentCost">recruitmentCost (required).</param>
        /// <param name="probationEndDate">probationEndDate.</param>
        /// <param name="workDays">workDays.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="bankSortCode">bankSortCode.</param>
        /// <param name="bankAccountNo">bankAccountNo.</param>
        /// <param name="bankNotes">bankNotes.</param>
        /// <param name="isPensionOptedIn">isPensionOptedIn.</param>
        /// <param name="pensionStartDate">pensionStartDate.</param>
        /// <param name="taxCode">taxCode.</param>
        /// <param name="salaries">salaries.</param>
        /// <param name="communications">communications.</param>
        /// <param name="workTimes">workTimes.</param>
        /// <param name="contributions">contributions.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="nextOfKinTitle">nextOfKinTitle.</param>
        /// <param name="nextOfKinFirstName">nextOfKinFirstName.</param>
        /// <param name="nextOfKinLastName">nextOfKinLastName.</param>
        /// <param name="nextOfKinOtherNames">nextOfKinOtherNames.</param>
        /// <param name="nextOfKinGender">nextOfKinGender.</param>
        /// <param name="nextOfKinDateOfBirth">nextOfKinDateOfBirth.</param>
        /// <param name="nextOfKinAddressId">nextOfKinAddressId.</param>
        /// <param name="nextOfKinAddress">nextOfKinAddress.</param>
        /// <param name="managerId">managerId.</param>
        /// <param name="manager">manager.</param>
        /// <param name="departmentId">departmentId.</param>
        /// <param name="department">department.</param>
        /// <param name="branchId">branchId.</param>
        /// <param name="branch">branch.</param>
        /// <param name="jobRoleId">jobRoleId.</param>
        /// <param name="jobRole">jobRole.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="leftDate">leftDate.</param>
        /// <param name="photo">photo.</param>
        /// <param name="photoId">photoId.</param>
        public Employee(Guid id = default(Guid), string title = default(string), string firstName = default(string), string lastName = default(string), DateTime? dateOfBirth = default(DateTime?), string gender = default(string), Guid? nationalityId = default(Guid?), Guid? employmentTypeId = default(Guid?), string nationalInsuranceNumber = default(string), Guid? noticePeriodId = default(Guid?), string recruitmentDetails = default(string), double recruitmentCost = default(double), DateTime? probationEndDate = default(DateTime?), int workDays = default(int), string bankName = default(string), string bankSortCode = default(string), string bankAccountNo = default(string), string bankNotes = default(string), bool isPensionOptedIn = default(bool), DateTime? pensionStartDate = default(DateTime?), string taxCode = default(string), List<Salary> salaries = default(List<Salary>), List<EmployeeCommunicationXref> communications = default(List<EmployeeCommunicationXref>), List<EmployeeWorkTime> workTimes = default(List<EmployeeWorkTime>), List<PensionContribution> contributions = default(List<PensionContribution>), List<EmployeeAddressXref> addresses = default(List<EmployeeAddressXref>), string nextOfKinTitle = default(string), string nextOfKinFirstName = default(string), string nextOfKinLastName = default(string), string nextOfKinOtherNames = default(string), string nextOfKinGender = default(string), DateTime? nextOfKinDateOfBirth = default(DateTime?), Guid? nextOfKinAddressId = default(Guid?), Address nextOfKinAddress = default(Address), Guid? managerId = default(Guid?), Employee manager = default(Employee), Guid? departmentId = default(Guid?), Department department = default(Department), Guid? branchId = default(Guid?), Branch branch = default(Branch), Guid? jobRoleId = default(Guid?), JobRole jobRole = default(JobRole), DateTime? startDate = default(DateTime?), DateTime? leftDate = default(DateTime?), EmployeePhoto photo = default(EmployeePhoto), Guid? photoId = default(Guid?))
        {
            // to ensure "firstName" is required (not null)
            this.FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for Employee and cannot be null");
            // to ensure "lastName" is required (not null)
            this.LastName = lastName ?? throw new ArgumentNullException("lastName is a required property for Employee and cannot be null");
            this.RecruitmentCost = recruitmentCost;
            this.Id = id;
            this.Title = title;
            this.DateOfBirth = dateOfBirth;
            this.Gender = gender;
            this.NationalityId = nationalityId;
            this.EmploymentTypeId = employmentTypeId;
            this.NationalInsuranceNumber = nationalInsuranceNumber;
            this.NoticePeriodId = noticePeriodId;
            this.RecruitmentDetails = recruitmentDetails;
            this.ProbationEndDate = probationEndDate;
            this.WorkDays = workDays;
            this.BankName = bankName;
            this.BankSortCode = bankSortCode;
            this.BankAccountNo = bankAccountNo;
            this.BankNotes = bankNotes;
            this.IsPensionOptedIn = isPensionOptedIn;
            this.PensionStartDate = pensionStartDate;
            this.TaxCode = taxCode;
            this.Salaries = salaries;
            this.Communications = communications;
            this.WorkTimes = workTimes;
            this.Contributions = contributions;
            this.Addresses = addresses;
            this.NextOfKinTitle = nextOfKinTitle;
            this.NextOfKinFirstName = nextOfKinFirstName;
            this.NextOfKinLastName = nextOfKinLastName;
            this.NextOfKinOtherNames = nextOfKinOtherNames;
            this.NextOfKinGender = nextOfKinGender;
            this.NextOfKinDateOfBirth = nextOfKinDateOfBirth;
            this.NextOfKinAddressId = nextOfKinAddressId;
            this.NextOfKinAddress = nextOfKinAddress;
            this.ManagerId = managerId;
            this.Manager = manager;
            this.DepartmentId = departmentId;
            this.Department = department;
            this.BranchId = branchId;
            this.Branch = branch;
            this.JobRoleId = jobRoleId;
            this.JobRole = jobRole;
            this.StartDate = startDate;
            this.LeftDate = leftDate;
            this.Photo = photo;
            this.PhotoId = photoId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "dateOfBirth", EmitDefaultValue = true)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets NationalityId
        /// </summary>
        [DataMember(Name = "nationalityId", EmitDefaultValue = true)]
        public Guid? NationalityId { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentTypeId
        /// </summary>
        [DataMember(Name = "employmentTypeId", EmitDefaultValue = true)]
        public Guid? EmploymentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets NationalInsuranceNumber
        /// </summary>
        [DataMember(Name = "nationalInsuranceNumber", EmitDefaultValue = false)]
        public string NationalInsuranceNumber { get; set; }

        /// <summary>
        /// Gets or Sets NoticePeriodId
        /// </summary>
        [DataMember(Name = "noticePeriodId", EmitDefaultValue = true)]
        public Guid? NoticePeriodId { get; set; }

        /// <summary>
        /// Gets or Sets RecruitmentDetails
        /// </summary>
        [DataMember(Name = "recruitmentDetails", EmitDefaultValue = false)]
        public string RecruitmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets RecruitmentCost
        /// </summary>
        [DataMember(Name = "recruitmentCost", IsRequired = true, EmitDefaultValue = false)]
        public double RecruitmentCost { get; set; }

        /// <summary>
        /// Gets or Sets ProbationEndDate
        /// </summary>
        [DataMember(Name = "probationEndDate", EmitDefaultValue = true)]
        public DateTime? ProbationEndDate { get; set; }

        /// <summary>
        /// Gets or Sets WorkDays
        /// </summary>
        [DataMember(Name = "workDays", EmitDefaultValue = false)]
        public int WorkDays { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankSortCode
        /// </summary>
        [DataMember(Name = "bankSortCode", EmitDefaultValue = false)]
        public string BankSortCode { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNo
        /// </summary>
        [DataMember(Name = "bankAccountNo", EmitDefaultValue = false)]
        public string BankAccountNo { get; set; }

        /// <summary>
        /// Gets or Sets BankNotes
        /// </summary>
        [DataMember(Name = "bankNotes", EmitDefaultValue = false)]
        public string BankNotes { get; set; }

        /// <summary>
        /// Gets or Sets IsPensionOptedIn
        /// </summary>
        [DataMember(Name = "isPensionOptedIn", EmitDefaultValue = false)]
        public bool IsPensionOptedIn { get; set; }

        /// <summary>
        /// Gets or Sets PensionStartDate
        /// </summary>
        [DataMember(Name = "pensionStartDate", EmitDefaultValue = true)]
        public DateTime? PensionStartDate { get; set; }

        /// <summary>
        /// Gets or Sets TaxCode
        /// </summary>
        [DataMember(Name = "taxCode", EmitDefaultValue = false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or Sets Salaries
        /// </summary>
        [DataMember(Name = "salaries", EmitDefaultValue = false)]
        public List<Salary> Salaries { get; set; }

        /// <summary>
        /// Gets or Sets Communications
        /// </summary>
        [DataMember(Name = "communications", EmitDefaultValue = false)]
        public List<EmployeeCommunicationXref> Communications { get; set; }

        /// <summary>
        /// Gets or Sets WorkTimes
        /// </summary>
        [DataMember(Name = "workTimes", EmitDefaultValue = false)]
        public List<EmployeeWorkTime> WorkTimes { get; set; }

        /// <summary>
        /// Gets or Sets Contributions
        /// </summary>
        [DataMember(Name = "contributions", EmitDefaultValue = false)]
        public List<PensionContribution> Contributions { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<EmployeeAddressXref> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinTitle
        /// </summary>
        [DataMember(Name = "nextOfKinTitle", EmitDefaultValue = false)]
        public string NextOfKinTitle { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinFirstName
        /// </summary>
        [DataMember(Name = "nextOfKinFirstName", EmitDefaultValue = false)]
        public string NextOfKinFirstName { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinLastName
        /// </summary>
        [DataMember(Name = "nextOfKinLastName", EmitDefaultValue = false)]
        public string NextOfKinLastName { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinOtherNames
        /// </summary>
        [DataMember(Name = "nextOfKinOtherNames", EmitDefaultValue = false)]
        public string NextOfKinOtherNames { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinGender
        /// </summary>
        [DataMember(Name = "nextOfKinGender", EmitDefaultValue = false)]
        public string NextOfKinGender { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinDateOfBirth
        /// </summary>
        [DataMember(Name = "nextOfKinDateOfBirth", EmitDefaultValue = true)]
        public DateTime? NextOfKinDateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinAddressId
        /// </summary>
        [DataMember(Name = "nextOfKinAddressId", EmitDefaultValue = true)]
        public Guid? NextOfKinAddressId { get; set; }

        /// <summary>
        /// Gets or Sets NextOfKinAddress
        /// </summary>
        [DataMember(Name = "nextOfKinAddress", EmitDefaultValue = false)]
        public Address NextOfKinAddress { get; set; }

        /// <summary>
        /// Gets or Sets ManagerId
        /// </summary>
        [DataMember(Name = "managerId", EmitDefaultValue = true)]
        public Guid? ManagerId { get; set; }

        /// <summary>
        /// Gets or Sets Manager
        /// </summary>
        [DataMember(Name = "manager", EmitDefaultValue = false)]
        public Employee Manager { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentId
        /// </summary>
        [DataMember(Name = "departmentId", EmitDefaultValue = true)]
        public Guid? DepartmentId { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public Department Department { get; set; }

        /// <summary>
        /// Gets or Sets BranchId
        /// </summary>
        [DataMember(Name = "branchId", EmitDefaultValue = true)]
        public Guid? BranchId { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = false)]
        public Branch Branch { get; set; }

        /// <summary>
        /// Gets or Sets JobRoleId
        /// </summary>
        [DataMember(Name = "jobRoleId", EmitDefaultValue = true)]
        public Guid? JobRoleId { get; set; }

        /// <summary>
        /// Gets or Sets JobRole
        /// </summary>
        [DataMember(Name = "jobRole", EmitDefaultValue = false)]
        public JobRole JobRole { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets LeftDate
        /// </summary>
        [DataMember(Name = "leftDate", EmitDefaultValue = true)]
        public DateTime? LeftDate { get; set; }

        /// <summary>
        /// Gets or Sets Photo
        /// </summary>
        [DataMember(Name = "photo", EmitDefaultValue = false)]
        public EmployeePhoto Photo { get; set; }

        /// <summary>
        /// Gets or Sets PhotoId
        /// </summary>
        [DataMember(Name = "photoId", EmitDefaultValue = true)]
        public Guid? PhotoId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  NationalityId: ").Append(NationalityId).Append("\n");
            sb.Append("  EmploymentTypeId: ").Append(EmploymentTypeId).Append("\n");
            sb.Append("  NationalInsuranceNumber: ").Append(NationalInsuranceNumber).Append("\n");
            sb.Append("  NoticePeriodId: ").Append(NoticePeriodId).Append("\n");
            sb.Append("  RecruitmentDetails: ").Append(RecruitmentDetails).Append("\n");
            sb.Append("  RecruitmentCost: ").Append(RecruitmentCost).Append("\n");
            sb.Append("  ProbationEndDate: ").Append(ProbationEndDate).Append("\n");
            sb.Append("  WorkDays: ").Append(WorkDays).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankSortCode: ").Append(BankSortCode).Append("\n");
            sb.Append("  BankAccountNo: ").Append(BankAccountNo).Append("\n");
            sb.Append("  BankNotes: ").Append(BankNotes).Append("\n");
            sb.Append("  IsPensionOptedIn: ").Append(IsPensionOptedIn).Append("\n");
            sb.Append("  PensionStartDate: ").Append(PensionStartDate).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  Salaries: ").Append(Salaries).Append("\n");
            sb.Append("  Communications: ").Append(Communications).Append("\n");
            sb.Append("  WorkTimes: ").Append(WorkTimes).Append("\n");
            sb.Append("  Contributions: ").Append(Contributions).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  NextOfKinTitle: ").Append(NextOfKinTitle).Append("\n");
            sb.Append("  NextOfKinFirstName: ").Append(NextOfKinFirstName).Append("\n");
            sb.Append("  NextOfKinLastName: ").Append(NextOfKinLastName).Append("\n");
            sb.Append("  NextOfKinOtherNames: ").Append(NextOfKinOtherNames).Append("\n");
            sb.Append("  NextOfKinGender: ").Append(NextOfKinGender).Append("\n");
            sb.Append("  NextOfKinDateOfBirth: ").Append(NextOfKinDateOfBirth).Append("\n");
            sb.Append("  NextOfKinAddressId: ").Append(NextOfKinAddressId).Append("\n");
            sb.Append("  NextOfKinAddress: ").Append(NextOfKinAddress).Append("\n");
            sb.Append("  ManagerId: ").Append(ManagerId).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  JobRoleId: ").Append(JobRoleId).Append("\n");
            sb.Append("  JobRole: ").Append(JobRole).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  LeftDate: ").Append(LeftDate).Append("\n");
            sb.Append("  Photo: ").Append(Photo).Append("\n");
            sb.Append("  PhotoId: ").Append(PhotoId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.NationalityId == input.NationalityId ||
                    (this.NationalityId != null &&
                    this.NationalityId.Equals(input.NationalityId))
                ) && 
                (
                    this.EmploymentTypeId == input.EmploymentTypeId ||
                    (this.EmploymentTypeId != null &&
                    this.EmploymentTypeId.Equals(input.EmploymentTypeId))
                ) && 
                (
                    this.NationalInsuranceNumber == input.NationalInsuranceNumber ||
                    (this.NationalInsuranceNumber != null &&
                    this.NationalInsuranceNumber.Equals(input.NationalInsuranceNumber))
                ) && 
                (
                    this.NoticePeriodId == input.NoticePeriodId ||
                    (this.NoticePeriodId != null &&
                    this.NoticePeriodId.Equals(input.NoticePeriodId))
                ) && 
                (
                    this.RecruitmentDetails == input.RecruitmentDetails ||
                    (this.RecruitmentDetails != null &&
                    this.RecruitmentDetails.Equals(input.RecruitmentDetails))
                ) && 
                (
                    this.RecruitmentCost == input.RecruitmentCost ||
                    this.RecruitmentCost.Equals(input.RecruitmentCost)
                ) && 
                (
                    this.ProbationEndDate == input.ProbationEndDate ||
                    (this.ProbationEndDate != null &&
                    this.ProbationEndDate.Equals(input.ProbationEndDate))
                ) && 
                (
                    this.WorkDays == input.WorkDays ||
                    this.WorkDays.Equals(input.WorkDays)
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankSortCode == input.BankSortCode ||
                    (this.BankSortCode != null &&
                    this.BankSortCode.Equals(input.BankSortCode))
                ) && 
                (
                    this.BankAccountNo == input.BankAccountNo ||
                    (this.BankAccountNo != null &&
                    this.BankAccountNo.Equals(input.BankAccountNo))
                ) && 
                (
                    this.BankNotes == input.BankNotes ||
                    (this.BankNotes != null &&
                    this.BankNotes.Equals(input.BankNotes))
                ) && 
                (
                    this.IsPensionOptedIn == input.IsPensionOptedIn ||
                    this.IsPensionOptedIn.Equals(input.IsPensionOptedIn)
                ) && 
                (
                    this.PensionStartDate == input.PensionStartDate ||
                    (this.PensionStartDate != null &&
                    this.PensionStartDate.Equals(input.PensionStartDate))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.Salaries == input.Salaries ||
                    this.Salaries != null &&
                    input.Salaries != null &&
                    this.Salaries.SequenceEqual(input.Salaries)
                ) && 
                (
                    this.Communications == input.Communications ||
                    this.Communications != null &&
                    input.Communications != null &&
                    this.Communications.SequenceEqual(input.Communications)
                ) && 
                (
                    this.WorkTimes == input.WorkTimes ||
                    this.WorkTimes != null &&
                    input.WorkTimes != null &&
                    this.WorkTimes.SequenceEqual(input.WorkTimes)
                ) && 
                (
                    this.Contributions == input.Contributions ||
                    this.Contributions != null &&
                    input.Contributions != null &&
                    this.Contributions.SequenceEqual(input.Contributions)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.NextOfKinTitle == input.NextOfKinTitle ||
                    (this.NextOfKinTitle != null &&
                    this.NextOfKinTitle.Equals(input.NextOfKinTitle))
                ) && 
                (
                    this.NextOfKinFirstName == input.NextOfKinFirstName ||
                    (this.NextOfKinFirstName != null &&
                    this.NextOfKinFirstName.Equals(input.NextOfKinFirstName))
                ) && 
                (
                    this.NextOfKinLastName == input.NextOfKinLastName ||
                    (this.NextOfKinLastName != null &&
                    this.NextOfKinLastName.Equals(input.NextOfKinLastName))
                ) && 
                (
                    this.NextOfKinOtherNames == input.NextOfKinOtherNames ||
                    (this.NextOfKinOtherNames != null &&
                    this.NextOfKinOtherNames.Equals(input.NextOfKinOtherNames))
                ) && 
                (
                    this.NextOfKinGender == input.NextOfKinGender ||
                    (this.NextOfKinGender != null &&
                    this.NextOfKinGender.Equals(input.NextOfKinGender))
                ) && 
                (
                    this.NextOfKinDateOfBirth == input.NextOfKinDateOfBirth ||
                    (this.NextOfKinDateOfBirth != null &&
                    this.NextOfKinDateOfBirth.Equals(input.NextOfKinDateOfBirth))
                ) && 
                (
                    this.NextOfKinAddressId == input.NextOfKinAddressId ||
                    (this.NextOfKinAddressId != null &&
                    this.NextOfKinAddressId.Equals(input.NextOfKinAddressId))
                ) && 
                (
                    this.NextOfKinAddress == input.NextOfKinAddress ||
                    (this.NextOfKinAddress != null &&
                    this.NextOfKinAddress.Equals(input.NextOfKinAddress))
                ) && 
                (
                    this.ManagerId == input.ManagerId ||
                    (this.ManagerId != null &&
                    this.ManagerId.Equals(input.ManagerId))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.DepartmentId == input.DepartmentId ||
                    (this.DepartmentId != null &&
                    this.DepartmentId.Equals(input.DepartmentId))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.BranchId == input.BranchId ||
                    (this.BranchId != null &&
                    this.BranchId.Equals(input.BranchId))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.JobRoleId == input.JobRoleId ||
                    (this.JobRoleId != null &&
                    this.JobRoleId.Equals(input.JobRoleId))
                ) && 
                (
                    this.JobRole == input.JobRole ||
                    (this.JobRole != null &&
                    this.JobRole.Equals(input.JobRole))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.LeftDate == input.LeftDate ||
                    (this.LeftDate != null &&
                    this.LeftDate.Equals(input.LeftDate))
                ) && 
                (
                    this.Photo == input.Photo ||
                    (this.Photo != null &&
                    this.Photo.Equals(input.Photo))
                ) && 
                (
                    this.PhotoId == input.PhotoId ||
                    (this.PhotoId != null &&
                    this.PhotoId.Equals(input.PhotoId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.NationalityId != null)
                    hashCode = hashCode * 59 + this.NationalityId.GetHashCode();
                if (this.EmploymentTypeId != null)
                    hashCode = hashCode * 59 + this.EmploymentTypeId.GetHashCode();
                if (this.NationalInsuranceNumber != null)
                    hashCode = hashCode * 59 + this.NationalInsuranceNumber.GetHashCode();
                if (this.NoticePeriodId != null)
                    hashCode = hashCode * 59 + this.NoticePeriodId.GetHashCode();
                if (this.RecruitmentDetails != null)
                    hashCode = hashCode * 59 + this.RecruitmentDetails.GetHashCode();
                hashCode = hashCode * 59 + this.RecruitmentCost.GetHashCode();
                if (this.ProbationEndDate != null)
                    hashCode = hashCode * 59 + this.ProbationEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.WorkDays.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankSortCode != null)
                    hashCode = hashCode * 59 + this.BankSortCode.GetHashCode();
                if (this.BankAccountNo != null)
                    hashCode = hashCode * 59 + this.BankAccountNo.GetHashCode();
                if (this.BankNotes != null)
                    hashCode = hashCode * 59 + this.BankNotes.GetHashCode();
                hashCode = hashCode * 59 + this.IsPensionOptedIn.GetHashCode();
                if (this.PensionStartDate != null)
                    hashCode = hashCode * 59 + this.PensionStartDate.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                if (this.Salaries != null)
                    hashCode = hashCode * 59 + this.Salaries.GetHashCode();
                if (this.Communications != null)
                    hashCode = hashCode * 59 + this.Communications.GetHashCode();
                if (this.WorkTimes != null)
                    hashCode = hashCode * 59 + this.WorkTimes.GetHashCode();
                if (this.Contributions != null)
                    hashCode = hashCode * 59 + this.Contributions.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.NextOfKinTitle != null)
                    hashCode = hashCode * 59 + this.NextOfKinTitle.GetHashCode();
                if (this.NextOfKinFirstName != null)
                    hashCode = hashCode * 59 + this.NextOfKinFirstName.GetHashCode();
                if (this.NextOfKinLastName != null)
                    hashCode = hashCode * 59 + this.NextOfKinLastName.GetHashCode();
                if (this.NextOfKinOtherNames != null)
                    hashCode = hashCode * 59 + this.NextOfKinOtherNames.GetHashCode();
                if (this.NextOfKinGender != null)
                    hashCode = hashCode * 59 + this.NextOfKinGender.GetHashCode();
                if (this.NextOfKinDateOfBirth != null)
                    hashCode = hashCode * 59 + this.NextOfKinDateOfBirth.GetHashCode();
                if (this.NextOfKinAddressId != null)
                    hashCode = hashCode * 59 + this.NextOfKinAddressId.GetHashCode();
                if (this.NextOfKinAddress != null)
                    hashCode = hashCode * 59 + this.NextOfKinAddress.GetHashCode();
                if (this.ManagerId != null)
                    hashCode = hashCode * 59 + this.ManagerId.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.DepartmentId != null)
                    hashCode = hashCode * 59 + this.DepartmentId.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.BranchId != null)
                    hashCode = hashCode * 59 + this.BranchId.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.JobRoleId != null)
                    hashCode = hashCode * 59 + this.JobRoleId.GetHashCode();
                if (this.JobRole != null)
                    hashCode = hashCode * 59 + this.JobRole.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.LeftDate != null)
                    hashCode = hashCode * 59 + this.LeftDate.GetHashCode();
                if (this.Photo != null)
                    hashCode = hashCode * 59 + this.Photo.GetHashCode();
                if (this.PhotoId != null)
                    hashCode = hashCode * 59 + this.PhotoId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 20.", new [] { "Title" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 100.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 100.", new [] { "LastName" });
            }

            // Gender (string) maxLength
            if(this.Gender != null && this.Gender.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Gender, length must be less than 1.", new [] { "Gender" });
            }

            // NationalInsuranceNumber (string) maxLength
            if(this.NationalInsuranceNumber != null && this.NationalInsuranceNumber.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NationalInsuranceNumber, length must be less than 15.", new [] { "NationalInsuranceNumber" });
            }

            // BankName (string) maxLength
            if(this.BankName != null && this.BankName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankName, length must be less than 50.", new [] { "BankName" });
            }

            // BankSortCode (string) maxLength
            if(this.BankSortCode != null && this.BankSortCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankSortCode, length must be less than 10.", new [] { "BankSortCode" });
            }

            // BankAccountNo (string) maxLength
            if(this.BankAccountNo != null && this.BankAccountNo.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccountNo, length must be less than 20.", new [] { "BankAccountNo" });
            }

            // TaxCode (string) maxLength
            if(this.TaxCode != null && this.TaxCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxCode, length must be less than 10.", new [] { "TaxCode" });
            }

            // NextOfKinTitle (string) maxLength
            if(this.NextOfKinTitle != null && this.NextOfKinTitle.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextOfKinTitle, length must be less than 20.", new [] { "NextOfKinTitle" });
            }

            // NextOfKinFirstName (string) maxLength
            if(this.NextOfKinFirstName != null && this.NextOfKinFirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextOfKinFirstName, length must be less than 100.", new [] { "NextOfKinFirstName" });
            }

            // NextOfKinLastName (string) maxLength
            if(this.NextOfKinLastName != null && this.NextOfKinLastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextOfKinLastName, length must be less than 100.", new [] { "NextOfKinLastName" });
            }

            // NextOfKinOtherNames (string) maxLength
            if(this.NextOfKinOtherNames != null && this.NextOfKinOtherNames.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextOfKinOtherNames, length must be less than 100.", new [] { "NextOfKinOtherNames" });
            }

            yield break;
        }
    }

}
