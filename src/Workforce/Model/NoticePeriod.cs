/*
 * Workforce API
 *
 * Public API for the Workforce software
 *
 * The version of the OpenAPI document: v1
 * Contact: adamlonsdale@me.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Workforce.Client.OpenAPIDateConverter;

namespace Workforce.Model
{
    /// <summary>
    /// NoticePeriod
    /// </summary>
    [DataContract(Name = "NoticePeriod")]
    public partial class NoticePeriod : IEquatable<NoticePeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NoticePeriod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NoticePeriod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NoticePeriod" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="description">description (required).</param>
        /// <param name="lengthOfTime">lengthOfTime (required).</param>
        public NoticePeriod(Guid id = default(Guid), string description = default(string), TimeSpan lengthOfTime = default(TimeSpan))
        {
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for NoticePeriod and cannot be null");
            // to ensure "lengthOfTime" is required (not null)
            this.LengthOfTime = lengthOfTime ?? throw new ArgumentNullException("lengthOfTime is a required property for NoticePeriod and cannot be null");
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LengthOfTime
        /// </summary>
        [DataMember(Name = "lengthOfTime", IsRequired = true, EmitDefaultValue = false)]
        public TimeSpan LengthOfTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NoticePeriod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LengthOfTime: ").Append(LengthOfTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NoticePeriod);
        }

        /// <summary>
        /// Returns true if NoticePeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of NoticePeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoticePeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LengthOfTime == input.LengthOfTime ||
                    (this.LengthOfTime != null &&
                    this.LengthOfTime.Equals(input.LengthOfTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LengthOfTime != null)
                    hashCode = hashCode * 59 + this.LengthOfTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
