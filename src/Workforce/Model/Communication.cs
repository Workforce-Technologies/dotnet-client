/* 
 * Workforce API
 *
 * Public API for the Workforce software
 *
 * The version of the OpenAPI document: v1
 * Contact: adamlonsdale@me.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Workforce.Client.OpenAPIDateConverter;

namespace Workforce.Model
{
    /// <summary>
    /// Communication
    /// </summary>
    [DataContract]
    public partial class Communication :  IEquatable<Communication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Communication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Communication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Communication" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="communicationType">communicationType (required).</param>
        /// <param name="detail">detail (required).</param>
        public Communication(Guid id = default(Guid), string communicationType = default(string), string detail = default(string))
        {
            // to ensure "communicationType" is required (not null)
            this.CommunicationType = communicationType ?? throw new ArgumentNullException("communicationType is a required property for Communication and cannot be null");
            // to ensure "detail" is required (not null)
            this.Detail = detail ?? throw new ArgumentNullException("detail is a required property for Communication and cannot be null");
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationType
        /// </summary>
        [DataMember(Name="communicationType", EmitDefaultValue=false)]
        public string CommunicationType { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Communication {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CommunicationType: ").Append(CommunicationType).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Communication);
        }

        /// <summary>
        /// Returns true if Communication instances are equal
        /// </summary>
        /// <param name="input">Instance of Communication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Communication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CommunicationType == input.CommunicationType ||
                    (this.CommunicationType != null &&
                    this.CommunicationType.Equals(input.CommunicationType))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CommunicationType != null)
                    hashCode = hashCode * 59 + this.CommunicationType.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CommunicationType (string) maxLength
            if(this.CommunicationType != null && this.CommunicationType.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CommunicationType, length must be less than 20.", new [] { "CommunicationType" });
            }

            // Detail (string) maxLength
            if(this.Detail != null && this.Detail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Detail, length must be less than 100.", new [] { "Detail" });
            }

            yield break;
        }
    }

}
