/*
 * Workforce API
 *
 * Public API for the Workforce software
 *
 * The version of the OpenAPI document: v1
 * Contact: adamlonsdale@me.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Workforce.Client.OpenAPIDateConverter;

namespace Workforce.Model
{
    /// <summary>
    /// EmployeeCommunicationXref
    /// </summary>
    [DataContract(Name = "EmployeeCommunicationXref")]
    public partial class EmployeeCommunicationXref : IEquatable<EmployeeCommunicationXref>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeCommunicationXref" /> class.
        /// </summary>
        /// <param name="communicationId">communicationId.</param>
        /// <param name="communication">communication.</param>
        /// <param name="linkType">linkType.</param>
        public EmployeeCommunicationXref(Guid communicationId = default(Guid), Communication communication = default(Communication), string linkType = default(string))
        {
            this.CommunicationId = communicationId;
            this.Communication = communication;
            this.LinkType = linkType;
        }

        /// <summary>
        /// Gets or Sets CommunicationId
        /// </summary>
        [DataMember(Name = "communicationId", EmitDefaultValue = false)]
        public Guid CommunicationId { get; set; }

        /// <summary>
        /// Gets or Sets Communication
        /// </summary>
        [DataMember(Name = "communication", EmitDefaultValue = false)]
        public Communication Communication { get; set; }

        /// <summary>
        /// Gets or Sets LinkType
        /// </summary>
        [DataMember(Name = "linkType", EmitDefaultValue = false)]
        public string LinkType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeCommunicationXref {\n");
            sb.Append("  CommunicationId: ").Append(CommunicationId).Append("\n");
            sb.Append("  Communication: ").Append(Communication).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeCommunicationXref);
        }

        /// <summary>
        /// Returns true if EmployeeCommunicationXref instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeCommunicationXref to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeCommunicationXref input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommunicationId == input.CommunicationId ||
                    (this.CommunicationId != null &&
                    this.CommunicationId.Equals(input.CommunicationId))
                ) && 
                (
                    this.Communication == input.Communication ||
                    (this.Communication != null &&
                    this.Communication.Equals(input.Communication))
                ) && 
                (
                    this.LinkType == input.LinkType ||
                    (this.LinkType != null &&
                    this.LinkType.Equals(input.LinkType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommunicationId != null)
                    hashCode = hashCode * 59 + this.CommunicationId.GetHashCode();
                if (this.Communication != null)
                    hashCode = hashCode * 59 + this.Communication.GetHashCode();
                if (this.LinkType != null)
                    hashCode = hashCode * 59 + this.LinkType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
